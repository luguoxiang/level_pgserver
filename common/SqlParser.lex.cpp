#line 2 "SqlParser.lex.cpp"

#line 4 "SqlParser.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 96
#define YY_END_OF_BUFFER 97
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[361] =
    {   0,
        0,    0,   97,   95,   93,   93,   82,   95,   95,   82,
       82,   95,   82,   82,   82,   66,   66,   89,   85,   87,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   82,   90,    0,   77,   75,    0,   92,   83,
        0,   76,   75,    0,    0,   68,    0,   67,   66,    0,
        0,   88,   86,   91,   91,   91,   91,    5,   30,   91,
       91,    0,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   59,   20,   39,   91,   91,   91,   91,
       91,   91,   91,   91,   42,   44,   91,   91,   91,   91,

       91,   91,   50,   91,   91,   91,   91,   91,   91,   91,
        0,   91,   84,    0,    0,   75,    0,    0,    0,   75,
        0,    0,    0,    0,   67,    0,    0,   69,    0,    1,
        2,    3,    4,    6,   91,   91,    0,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   22,   91,   61,   91,   91,   91,   91,
       40,   91,   91,   91,   91,   91,   55,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,    0,   58,    0,   75,    0,   75,    0,   94,    0,
       71,    0,    0,   70,   78,    7,   91,    0,   31,   91,

       91,   34,   91,   15,   91,   91,   91,   91,   91,   17,
       91,   91,   91,   91,   47,   23,   91,   25,   63,   64,
       26,   91,   28,   41,   91,   91,   91,   91,   33,   91,
       91,   91,   72,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,    0,    0,    0,    0,    0,   81,   91,
       91,    0,   91,   91,   91,   91,   91,   91,   74,   91,
       91,   18,   91,   91,   91,   91,   27,   91,   45,   91,
       91,   91,   49,   91,   51,   91,   91,   91,   91,   65,
       91,   91,   29,   91,   78,   91,    8,    0,   91,   91,
       11,   91,   60,   91,   37,   13,   14,   19,   35,   21,

       91,   43,   91,   46,   91,   36,   91,   52,   91,   91,
       54,   56,   91,   91,   91,    0,   91,   10,   91,   16,
       24,   62,   91,   91,   73,   91,   57,   91,   91,    0,
        9,   12,   48,   91,   53,   91,   32,    7,    0,   91,
       91,    0,   38,   91,    0,   91,    0,   57,    0,   79,
        0,    0,    0,    0,    0,    0,    0,    0,   80,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    8,    9,   10,   11,   10,
       10,   12,   13,   10,   14,   15,   16,   17,   18,   19,
       18,   20,   18,   18,   18,   21,   18,   22,   23,   24,
       25,   26,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
        1,   53,    1,   10,   52,    1,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   52,    1,   79,    1,   10,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[80] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    1,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    4,    4,    4,    4,    4,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[376] =
    {   0,
        0,    0,  767,  872,  872,  872,  740,   77,   68,  752,
      872,   79,  744,   74,  745,   81,   88,   85,  872,  625,
       83,   46,   81,  116,   64,   91,   73,   95,  127,   93,
      105,  134,    0,  130,  136,   93,  150,  174,  172,  139,
      172,  168,  570,  872,  216,  872,  641,  217,  229,  872,
      218,  872,  636,  219,  152,  234,    0,  242,  259,  268,
        0,  872,  872,    0,  143,  145,  245,  202,    0,  210,
      225,  286,  211,  263,  221,  226,  256,  259,  268,  268,
      269,  270,  264,    0,  284,    0,  278,  263,  283,  282,
      293,  281,  293,  300,    0,  303,  299,  306,  304,  322,

      322,  307,    0,  306,  328,  325,  327,  326,  335,  323,
        0,  324,  872,  181,  378,  380,  381,  174,  393,  395,
      396,  448,  395,  393,  401,  422,  406,  433,    0,    0,
        0,    0,    0,    0,  330,  348,  443,  376,  383,  380,
      388,  382,  387,  400,  409,  412,  420,  438,  427,  420,
      433,  434,  439,  457,  433,    0,  429,  447,  444,  450,
        0,  443,  437,  452,  447,  456,    0,  440,  452,  453,
      460,  470,  478,  463,  469,  484,  472,  473,  493,  479,
      487,    0,    0,  190,  520,  215,  518,  363,  346,  515,
      523,  222,  535,  540,    0,  510,  499,  548,  534,  516,

      524,    0,  539,    0,  529,  549,  546,  548,  533,    0,
      538,  541,  544,  539,    0,    0,  551,    0,    0,    0,
        0,  539,    0,    0,  555,  543,  561,  562,    0,  554,
      562,  559,    0,  555,  549,  557,  566,  554,  583,  586,
      590,  597,  591,  224,  623,  624,  621,  622,  872,  605,
      604,  619,  614,  604,  614,  606,  607,  618,    0,  609,
      170,    0,  624,  627,  613,  629,    0,  617,    0,  620,
      619,  631,  622,  630,    0,  640,  629,  642,  652,    0,
      643,  662,    0,  654,  872,  650,    0,  211,  654,  654,
        0,  672,    0,  662,    0,    0,    0,    0,    0,    0,

      659,    0,  653,    0,  666,    0,  680,    0,  668,  680,
        0,    0,  668,  686,  683,  700,  693,    0,  679,    0,
        0,    0,  686,  690,    0,  707,  715,  713,  700,  728,
        0,    0,    0,  719,    0,  724,    0,    0,  168,  724,
      709,  755,    0,  725,  767,  718,  755,    0,  773,  872,
      778,  116,  783,  788,  111,  793,  798,  109,  872,  872,
      819,  824,  826,  831,  836,  841,  112,  100,  846,  851,
      856,   79,   77,  861,  866
    } ;

static yyconst flex_int16_t yy_def[376] =
    {   0,
      360,    1,  360,  360,  360,  360,  360,  361,  360,  360,
      360,  362,  360,  360,  360,  360,  360,  360,  360,  360,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  360,  360,  361,  360,  360,  364,  360,  360,
      362,  360,  360,  365,  360,  360,  366,  360,  360,  360,
      367,  360,  360,  363,  363,  363,  363,  363,  363,  363,
      363,  360,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      368,  363,  360,  369,  361,  361,  364,  370,  362,  362,
      365,  371,  360,  366,  360,  360,  360,  360,  372,  363,
      363,  363,  363,  363,  363,  363,  360,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  373,  363,  374,  369,  375,  370,  371,  371,  360,
      360,  360,  360,  360,  367,  363,  363,  360,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  368,  369,  374,  370,  375,  360,  363,
      363,  360,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  360,  363,  363,  360,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  360,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  360,
      363,  363,  363,  363,  363,  363,  363,  363,  360,  363,
      363,  360,  363,  363,  360,  363,  360,  363,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,    0,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360
    } ;

static yyconst flex_int16_t yy_nxt[952] =
    {   0,
        4,    5,    6,    5,    5,    7,    8,    9,   10,   11,
       12,   11,   11,   13,   14,   15,   16,   17,   17,   17,
       17,    4,   11,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   33,   33,   37,   38,   39,   40,   41,   42,
       33,   33,    4,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   33,
       33,   37,   38,   39,   40,   41,   42,   33,   43,   46,
      244,   52,  195,   47,   49,   49,   49,   49,   49,   53,
       56,   56,   56,   56,   56,   58,   69,   59,   59,   59,

       59,   59,   58,  182,   59,   59,   59,   59,   59,   62,
       44,   60,   65,   77,   70,  129,   82,   78,   60,  359,
       66,   83,   67,   69,   71,   79,   72,   68,   80,   48,
       61,   54,  356,   87,   81,   88,   97,  353,   60,   65,
       77,   70,   73,   82,   78,   60,   74,   66,   83,   67,
       75,   71,   79,  122,   68,   80,  122,   61,   84,   76,
       87,   81,   88,   97,   89,  108,   85,   94,   90,   73,
       92,   86,  130,   74,   91,   95,   93,   75,  111,   96,
       98,  342,  131,   99,   53,   84,   76,   47,  100,  296,
      297,   89,  108,   85,   94,   90,  185,   92,   86,  130,

      101,   91,   95,   93,  102,  109,   96,   98,  112,  131,
       99,  105,  110,  106,  103,  100,  107,  104,   46,   46,
       52,   52,   47,  116,  316,  187,  186,  101,   53,  120,
      134,  102,  109,  184,  285,  112,  135,  249,  105,  110,
      106,  103,  246,  107,  104,   49,   49,   49,   49,   49,
       56,   56,   56,   56,   56,  136,  138,  134,  125,  125,
      125,  125,  125,  135,  123,  142,  143,  248,   48,  117,
       54,  121,  126,   58,  132,   59,   59,   59,   59,   59,
      127,  127,  136,  138,  128,  128,  128,  128,  128,   60,
      144,  123,  142,  143,  139,  133,  146,  145,  147,  126,

      140,  132,  137,  137,  137,  137,  137,  141,  148,  149,
      150,  151,  155,  156,  157,  152,   60,  144,  158,  160,
      159,  139,  133,  146,  145,  147,  161,  140,  153,  154,
      162,  163,  164,  165,  141,  148,  149,  150,  151,  155,
      156,  157,  152,  166,  168,  158,  160,  159,  169,  170,
      171,  167,  172,  161,  176,  153,  154,  162,  163,  164,
      165,  177,  173,  178,  174,  180,  181,  183,  189,  179,
      166,  168,  175,  196,  197,  169,  170,  171,  167,  172,
       46,  176,   46,   46,   47,  189,  185,  116,  177,  173,
      178,  174,  180,  181,  183,   52,  179,   52,   52,  175,

      196,  197,  199,   53,  192,  187,  120,  190,  190,  200,
      201,  191,  191,  191,  191,  191,  202,  125,  125,  125,
      125,  125,  128,  128,  128,  128,  128,  203,  204,  199,
       48,  126,   48,  117,  193,  193,  200,  201,  194,  194,
      194,  194,  194,  202,  205,   54,  206,   54,  121,  128,
      128,  128,  128,  128,  203,  204,  207,  208,  126,  198,
      198,  198,  198,  198,  209,  210,  211,  212,  213,  214,
      189,  205,  219,  206,  220,  215,  216,  221,  222,  223,
      224,  225,  226,  207,  208,  227,  228,  217,  229,  230,
      231,  209,  210,  211,  212,  213,  214,  218,  232,  219,

      233,  220,  236,  237,  221,  222,  223,  224,  225,  226,
      238,  239,  227,  228,  217,  229,  230,  231,  234,  240,
      235,  241,  242,  243,  218,  232,  185,  233,  187,  236,
      237,  191,  191,  191,  191,  191,  250,  238,  239,  191,
      191,  191,  191,  191,  251,  234,  240,  235,  241,  242,
      243,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  253,  254,  250,  252,  252,  252,  252,  252,  255,
      186,  251,  184,  256,  257,  258,  259,  260,  261,  262,
      263,  264,  265,  266,  267,  268,  269,  270,  253,  254,
      271,  272,  273,  274,  275,  276,  255,  277,  278,  279,

      256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
      266,  267,  268,  269,  270,  280,  281,  271,  272,  273,
      274,  275,  276,  282,  277,  278,  279,  283,  284,   47,
      185,   53,  187,  286,  287,  288,  288,  288,  288,  288,
      289,  290,  280,  281,  291,  292,  118,  114,  113,   63,
      282,  293,  294,  295,  283,  284,  298,  299,  300,  301,
      286,  287,  302,  303,  304,  305,  306,  289,  290,  307,
      308,  291,  292,  186,  248,  184,  246,  309,  293,  294,
      295,  310,  311,  298,  299,  300,  301,  312,  313,  302,
      303,  304,  305,  306,  314,  315,  307,  308,  317,  318,

      319,  320,  321,  322,  309,  323,  324,  325,  310,  311,
      326,  327,  328,  329,  312,  313,  330,  330,  330,  330,
      330,  314,  315,  331,  332,  317,  318,  319,  320,  321,
      322,  333,  323,  324,  325,  334,  335,  326,  327,  328,
      329,  336,  337,  338,  339,  339,  339,  339,  339,  340,
      331,  332,  341,  343,  344,  346,   57,   55,  333,  349,
       50,  348,  334,  335,   44,  350,  360,  360,  336,  337,
      338,  345,  345,  345,  345,  345,  340,  360,  360,  341,
      343,  344,  346,  347,  347,  347,  347,  347,  348,  351,
      351,  351,  351,  351,  352,  352,  352,  352,  352,  354,

      354,  354,  354,  354,  355,  355,  355,  355,  355,  357,
      357,  357,  357,  357,  358,  358,  358,  358,  358,   45,
       45,   45,   45,   45,   51,   51,   51,   51,   51,   64,
       64,  115,  115,  115,  115,  115,  119,  119,  119,  119,
      119,  124,  124,  360,  124,  124,  114,  360,  114,  114,
      114,  118,  360,  118,  118,  118,  188,  360,  188,  188,
      188,  245,  360,  245,  245,  245,  247,  360,  247,  247,
      247,    3,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360
    } ;

static yyconst flex_int16_t yy_chk[952] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    8,
      373,   12,  372,    8,    9,    9,    9,    9,    9,   12,
       14,   14,   14,   14,   14,   16,   22,   16,   16,   16,

       16,   16,   17,  368,   17,   17,   17,   17,   17,   18,
       18,   16,   21,   25,   23,  367,   27,   26,   17,  358,
       21,   28,   21,   22,   23,   26,   24,   21,   26,    8,
       16,   12,  355,   30,   26,   31,   36,  352,   16,   21,
       25,   23,   24,   27,   26,   17,   24,   21,   28,   21,
       24,   23,   26,   55,   21,   26,   55,   16,   29,   24,
       30,   26,   31,   36,   32,   40,   29,   35,   32,   24,
       34,   29,   65,   24,   32,   35,   34,   24,   42,   35,
       37,  339,   66,   37,  118,   29,   24,  114,   37,  261,
      261,   32,   40,   29,   35,   32,  184,   34,   29,   65,

       38,   32,   35,   34,   38,   41,   35,   37,   42,   66,
       37,   39,   41,   39,   38,   37,   39,   38,   45,   48,
       51,   54,   45,   48,  288,  186,  118,   38,   51,   54,
       68,   38,   41,  114,  244,   42,   70,  192,   39,   41,
       39,   38,  184,   39,   38,   49,   49,   49,   49,   49,
       56,   56,   56,   56,   56,   71,   73,   68,   58,   58,
       58,   58,   58,   70,   56,   75,   76,  186,   45,   48,
       51,   54,   58,   59,   67,   59,   59,   59,   59,   59,
       60,   60,   71,   73,   60,   60,   60,   60,   60,   59,
       77,   56,   75,   76,   74,   67,   78,   77,   79,   58,

       74,   67,   72,   72,   72,   72,   72,   74,   80,   81,
       82,   83,   87,   88,   89,   85,   59,   77,   90,   91,
       90,   74,   67,   78,   77,   79,   92,   74,   85,   85,
       93,   94,   96,   97,   74,   80,   81,   82,   83,   87,
       88,   89,   85,   98,   99,   90,   91,   90,  100,  101,
      102,   98,  104,   92,  106,   85,   85,   93,   94,   96,
       97,  107,  105,  108,  105,  109,  110,  112,  189,  108,
       98,   99,  105,  135,  136,  100,  101,  102,   98,  104,
      115,  106,  116,  117,  115,  188,  116,  117,  107,  105,
      108,  105,  109,  110,  112,  119,  108,  120,  121,  105,

      135,  136,  138,  119,  124,  120,  121,  123,  123,  139,
      140,  123,  123,  123,  123,  123,  141,  125,  125,  125,
      125,  125,  127,  127,  127,  127,  127,  142,  143,  138,
      115,  125,  116,  117,  126,  126,  139,  140,  126,  126,
      126,  126,  126,  141,  144,  119,  145,  120,  121,  128,
      128,  128,  128,  128,  142,  143,  146,  147,  125,  137,
      137,  137,  137,  137,  148,  149,  150,  151,  152,  153,
      122,  144,  155,  145,  157,  154,  154,  158,  159,  160,
      162,  163,  164,  146,  147,  165,  166,  154,  168,  169,
      170,  148,  149,  150,  151,  152,  153,  154,  171,  155,

      172,  157,  174,  175,  158,  159,  160,  162,  163,  164,
      176,  177,  165,  166,  154,  168,  169,  170,  173,  178,
      173,  179,  180,  181,  154,  171,  185,  172,  187,  174,
      175,  190,  190,  190,  190,  190,  196,  176,  177,  191,
      191,  191,  191,  191,  197,  173,  178,  173,  179,  180,
      181,  193,  193,  193,  193,  193,  194,  194,  194,  194,
      194,  199,  200,  196,  198,  198,  198,  198,  198,  201,
      187,  197,  185,  203,  205,  206,  207,  208,  209,  211,
      212,  213,  214,  217,  222,  225,  226,  227,  199,  200,
      228,  230,  231,  232,  234,  235,  201,  236,  237,  238,

      203,  205,  206,  207,  208,  209,  211,  212,  213,  214,
      217,  222,  225,  226,  227,  239,  240,  228,  230,  231,
      232,  234,  235,  241,  236,  237,  238,  242,  243,  245,
      246,  247,  248,  250,  251,  252,  252,  252,  252,  252,
      253,  254,  239,  240,  255,  256,   53,   47,   43,   20,
      241,  257,  258,  260,  242,  243,  263,  264,  265,  266,
      250,  251,  268,  270,  271,  272,  273,  253,  254,  274,
      276,  255,  256,  247,  248,  245,  246,  277,  257,  258,
      260,  278,  279,  263,  264,  265,  266,  281,  282,  268,
      270,  271,  272,  273,  284,  286,  274,  276,  289,  290,

      292,  294,  301,  303,  277,  305,  307,  309,  278,  279,
      310,  313,  314,  315,  281,  282,  316,  316,  316,  316,
      316,  284,  286,  317,  319,  289,  290,  292,  294,  301,
      303,  323,  305,  307,  309,  324,  326,  310,  313,  314,
      315,  327,  328,  329,  330,  330,  330,  330,  330,  334,
      317,  319,  336,  340,  341,  344,   15,   13,  323,  347,
       10,  346,  324,  326,    7,  347,    3,    0,  327,  328,
      329,  342,  342,  342,  342,  342,  334,    0,    0,  336,
      340,  341,  344,  345,  345,  345,  345,  345,  346,  349,
      349,  349,  349,  349,  351,  351,  351,  351,  351,  353,

      353,  353,  353,  353,  354,  354,  354,  354,  354,  356,
      356,  356,  356,  356,  357,  357,  357,  357,  357,  361,
      361,  361,  361,  361,  362,  362,  362,  362,  362,  363,
      363,  364,  364,  364,  364,  364,  365,  365,  365,  365,
      365,  366,  366,    0,  366,  366,  369,    0,  369,  369,
      369,  370,    0,  370,  370,  370,  371,    0,  371,  371,
      371,  374,    0,  374,  374,  374,  375,    0,  375,  375,
      375,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[97] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SqlParser.l"
#line 5 "SqlParser.l"
#include "ParseNode.h"
#include "SqlParser.tab.h"
#include <stdarg.h>
#include <string.h>
#include <assert.h>
#include <time.h>

#define STR_MAX_LEN     (16318)  /* 16KB length */

extern void yyerror(YYLTYPE* yylloc, ParseResult* p, yyscan_t scanner, const char* s,...);

#define YY_USER_ACTION yylloc->first_line = yylloc->last_line = ((ParseResult*)yyextra)->m_yylineno;\
	yylloc->first_column = ((ParseResult*)yyextra)->m_yycolumn;\
	yylloc->last_column = yylloc->first_column + yyleng - 1;\
	((ParseResult*)yyextra)->m_yycolumn += yyleng;

extern ParseNode* newNode(ParseResult* pResult, int type, int num);

static size_t parseBinary(const char* pszSrc, char* pszDest, size_t iLen)
{
	size_t i,j;
	j = 0;
	for(i = 0; i< iLen; i+=2)
	{
		char szBuf[3];
		szBuf[0] = pszSrc[i];
		szBuf[1] = pszSrc[i+1];
		szBuf[2] = 0;
		unsigned char a = strtol(szBuf,0, 16);
		pszDest[j++] = (char)a;
	}
	return j;
}

#line 823 "SqlParser.lex.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 41 "SqlParser.l"

#line 1066 "SqlParser.lex.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 361 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 872 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "SqlParser.l"
{return ADD;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 43 "SqlParser.l"
{ return ALL;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 44 "SqlParser.l"
{return ANDOP;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 45 "SqlParser.l"
{return ANY;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 46 "SqlParser.l"
{return AS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 47 "SqlParser.l"
{return ASC;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 48 "SqlParser.l"
{return CHAR;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 49 "SqlParser.l"
{return CREATE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 50 "SqlParser.l"
{return DATABASE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 51 "SqlParser.l"
{ return DEFAULT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 52 "SqlParser.l"
{ return DELETE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 53 "SqlParser.l"
{ return DISTINCT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 54 "SqlParser.l"
{ return FLOAT;}
	YY_BREAK
case 14:
#line 56 "SqlParser.l"
case 15:
YY_RULE_SETUP
#line 56 "SqlParser.l"
{ return DROP;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 57 "SqlParser.l"
{ return EXPLAIN;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 58 "SqlParser.l"
{ return FROM;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 59 "SqlParser.l"
{ return GROUP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 60 "SqlParser.l"
{ return HAVING;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 61 "SqlParser.l"
{ return IN;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 62 "SqlParser.l"
{ return INSERT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 63 "SqlParser.l"
{ return INTEGER;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 64 "SqlParser.l"
{ return INTEGER;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 65 "SqlParser.l"
{ return INTEGER;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 66 "SqlParser.l"
{ return INTO;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 67 "SqlParser.l"
{return LIKE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 68 "SqlParser.l"
{ return LIMIT;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 69 "SqlParser.l"
{return LOAD;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 70 "SqlParser.l"
{return WHERE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 71 "SqlParser.l"
{return BY;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 72 "SqlParser.l"
{return DATA;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 73 "SqlParser.l"
{return WORKLOAD;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 74 "SqlParser.l"
{return SHOW;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 75 "SqlParser.l"
{return DESC;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 76 "SqlParser.l"
{return INFILE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 77 "SqlParser.l"
{return TABLES;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 78 "SqlParser.l"
{return FIELDS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 79 "SqlParser.l"
{return TERMINATED;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 80 "SqlParser.l"
{return IS;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 81 "SqlParser.l"
{return NOT;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 82 "SqlParser.l"
{ 
	yylval->pNode = newNode((ParseResult*)yyextra, NULL_NODE,0);
	return NULLX;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "SqlParser.l"
{ return ON;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "SqlParser.l"
{ return OFFSET;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "SqlParser.l"
{ return OR;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "SqlParser.l"
{ return ORDER;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "SqlParser.l"
{ return SELECT;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "SqlParser.l"
{ return SMALLINT;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "SqlParser.l"
{ return SMALLINT;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "SqlParser.l"
{return TABLE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 94 "SqlParser.l"
{ return TO;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "SqlParser.l"
{ return UNION;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "SqlParser.l"
{return UNIQUE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "SqlParser.l"
{ return UNSIGNED;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 98 "SqlParser.l"
{ return UPDATE;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 99 "SqlParser.l"
{ return SET;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 100 "SqlParser.l"
{ return VALUES;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 101 "SqlParser.l"
{return VARCHAR;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "SqlParser.l"
{return XOR;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "SqlParser.l"
{return IF;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 104 "SqlParser.l"
{return EXISTS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 105 "SqlParser.l"
{return KEY;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 106 "SqlParser.l"
{ return PRIMARY;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 107 "SqlParser.l"
{return JOIN;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 108 "SqlParser.l"
{ return LEFT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 109 "SqlParser.l"
{return USING;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 111 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, INT_NODE,0);
	yylval->pNode = pNode;
	pNode->m_pszValue = my_strdup(pResult, yytext);
	pNode->m_pszExpr = pNode->m_pszValue;
	errno = 0;
	pNode->m_iValue = strtol(pNode->m_pszValue, 0, 10);
	if (errno != 0)
	{
		yyerror(yylloc, (ParseResult*)yyextra, NULL, "Integer Out of Range: %s", yytext);
		return ERROR;
	}
	else return INTNUM;
}
	YY_BREAK
case 67:
#line 127 "SqlParser.l"
case 68:
#line 128 "SqlParser.l"
case 69:
#line 129 "SqlParser.l"
case 70:
#line 130 "SqlParser.l"
case 71:
YY_RULE_SETUP
#line 130 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, FLOAT_NODE,0);
	yylval->pNode = pNode;
	pNode->m_pszValue = my_strdup(pResult, yytext);
	pNode->m_pszExpr = pNode->m_pszValue;
	return APPROXNUM;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 139 "SqlParser.l"
{
	ParseNode* pNode = newNode((ParseResult*)yyextra, BOOL_NODE,0);
	pNode->m_iValue = 1;
	yylval->pNode = pNode;
	pNode->m_pszExpr = "true";
	return BOOL;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "SqlParser.l"
{
	ParseNode* pNode = newNode((ParseResult*)yyextra, BOOL_NODE,0);
	pNode->m_iValue = -1;
	yylval->pNode = pNode;
	pNode->m_pszExpr = "unknown";
	return BOOL;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 153 "SqlParser.l"
{
	ParseNode* pNode = newNode((ParseResult*)yyextra, BOOL_NODE,0);
	pNode->m_iValue = 0;
	yylval->pNode = pNode;
	pNode->m_pszExpr = "false";
	return BOOL;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 161 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, STR_NODE,0);
	yylval->pNode = pNode;

	char* pszSrc = yytext+1;
	int len = strlen(pszSrc) - 1; //remove last quote charactor
	if(len > STR_MAX_LEN)
	{
		yyerror(yylloc, (ParseResult*)yyextra, NULL, "String is too large: %s", yytext);
		return ERROR;
	}

	char* pszDest = (char*) memPoolAlloc(len + 1, pResult);

	pNode->m_pszValue = pszDest;
	pNode->m_pszExpr = pszDest;
	pNode->m_iValue = parseString(pszSrc, pszDest, len);

	return STRING;
}
	YY_BREAK
case 76:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 183 "SqlParser.l"
{yyerror(yylloc, (ParseResult*)yyextra,NULL, "Unterminated string %s", yytext);}
	YY_BREAK
case 77:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 185 "SqlParser.l"
{yyerror(yylloc, (ParseResult*)yyextra, NULL,"Unterminated string %s", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, BINARY_NODE,0);
	char* pszSrc = yytext + 2; 
	char* pszDest = 0;
	
	size_t len = strlen(pszSrc);
	if(pszSrc[len - 1] == '\'')
	{
		--len;
	}
	assert((len % 2) == 0);

	pszDest = (char*) memPoolAlloc(len/2, pResult);
	pNode->m_pszValue = pszDest;
	pNode->m_iValue = parseBinary(pszSrc, pszDest, len);
	pNode->m_pszExpr = my_strdup(pResult, yytext);

	yylval->pNode = pNode;
	return BINARY;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 209 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, DATE_NODE,0);
	char* pszDest =  my_strdup(pResult, yytext + 2);
	size_t len = strlen(pszDest);
	--len;
	pszDest[len] = '\0';//remove final '

	pNode->m_pszValue = pszDest;
	pNode->m_pszExpr = pszDest;

	pNode->m_iValue = parseTime(pszDest);
	if(pNode->m_iValue == 0)
	{
		yyerror(yylloc, (ParseResult*)yyextra,NULL, "Wrong date: %s", yytext);
		return ERROR;
	}
	
	yylval->pNode = pNode;
	return DATE_VALUE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 230 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, DATE_NODE,0);
	char* pszDest =  my_strdup(pResult, yytext + 2);
	size_t len = strlen(pszDest);
	--len;
	pszDest[len] = '\0';//remove final '
	pNode->m_pszValue = pszDest;
	pNode->m_pszExpr = pszDest;

	pNode->m_iValue = parseTime(pszDest);
	if(pNode->m_iValue == 0)
	{
		yyerror(yylloc, (ParseResult*)yyextra,NULL, "Wrong date: %s", yytext);
		return ERROR;
	}

	yylval->pNode = pNode;
	return DATE_VALUE;
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 251 "SqlParser.l"
{ }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 253 "SqlParser.l"
{ return yytext[0];}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 255 "SqlParser.l"
{ return ANDOP;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 256 "SqlParser.l"
{return OR;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 257 "SqlParser.l"
{return COMP_EQ;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 258 "SqlParser.l"
{return COMP_GE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 259 "SqlParser.l"
{return COMP_GT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 260 "SqlParser.l"
{return COMP_LE;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 261 "SqlParser.l"
{return COMP_LT;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 262 "SqlParser.l"
{return COMP_NE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 264 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, NAME_NODE,0);
	yylval->pNode = pNode;
	pNode->m_pszValue = my_strdup(pResult,yytext);
	pNode->m_pszExpr = pNode->m_pszValue;
	pNode->m_iValue = 0;
	return NAME;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 274 "SqlParser.l"
{
	ParseResult* pResult = (ParseResult*)yyextra;
	ParseNode* pNode = newNode(pResult, PARAM_NODE,0);
	yylval->pNode = pNode;
	pNode->m_pszValue = "unbound";
	int index = strtol(yytext + 1, 0, 10);
	if (errno != 0 || index <= 0 || index > 64)
	{
		yyerror(yylloc, (ParseResult*)yyextra,NULL, "Illegal prepared statement param: %s", yytext);
		return ERROR;
	}
	pNode->m_iValue = index;
	return PARAM;
}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 289 "SqlParser.l"
{}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 290 "SqlParser.l"

	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 292 "SqlParser.l"
{return ';';}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 293 "SqlParser.l"
{
	yyerror(yylloc, (ParseResult*)yyextra,NULL, "mystery charactor '%c'", *yytext);
	return ERROR;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 297 "SqlParser.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1787 "SqlParser.lex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 361 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 361 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 360);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 297 "SqlParser.l"




